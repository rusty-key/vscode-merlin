// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Node = require("./bindings/Node.bs.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Semver = require("semver");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var UnexpectedJSONValue = Caml_exceptions.create("Esy.UnexpectedJSONValue");

var Stderr = Caml_exceptions.create("Esy.Stderr");

var UnknownError = Caml_exceptions.create("Esy.UnknownError");

var JSError = Caml_exceptions.create("Esy.JSError");

function bool$prime(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* JSONFalse */0 :
          return false;
      case /* JSONTrue */1 :
          return true;
      case /* JSONNull */2 :
          throw [
                UnexpectedJSONValue,
                x
              ];
      
    }
  } else {
    throw [
          UnexpectedJSONValue,
          x
        ];
  }
}

function raiseIfNone(param) {
  if (param !== undefined) {
    return Caml_option.valFromOption(param);
  } else {
    return Pervasives.failwith("Found None where it was not expected");
  }
}

function bool_(x) {
  return bool$prime(Js_json.classify(raiseIfNone(x)));
}

function nullableString$prime(x) {
  if (typeof x === "number") {
    if (x === /* JSONNull */2) {
      return null;
    } else {
      throw [
            UnexpectedJSONValue,
            x
          ];
    }
  } else if (x.tag) {
    throw [
          UnexpectedJSONValue,
          x
        ];
  } else {
    return x[0];
  }
}

function nullableString(param) {
  if (param !== undefined) {
    return nullableString$prime(Js_json.classify(Caml_option.valFromOption(param)));
  } else {
    return null;
  }
}

function getStatus(path) {
  return $$Node.ChildProcess.exec("esy status", {
                cwd: path
              }).then((function (param) {
                var statusErrorString = param[1];
                if (statusErrorString === "") {
                  try {
                    var json = JSON.parse(param[0]);
                    var x = Js_json.classify(json);
                    var dict;
                    if (typeof x === "number") {
                      throw [
                            UnexpectedJSONValue,
                            x
                          ];
                    } else if (x.tag === /* JSONObject */2) {
                      dict = x[0];
                    } else {
                      throw [
                            UnexpectedJSONValue,
                            x
                          ];
                    }
                    var x$1 = Js_dict.get(dict, "isProject");
                    var isProject = bool$prime(Js_json.classify(raiseIfNone(x$1)));
                    var x$2 = Js_dict.get(dict, "isProjectSolved");
                    var isProjectSolved = bool$prime(Js_json.classify(raiseIfNone(x$2)));
                    var x$3 = Js_dict.get(dict, "isProjectFetched");
                    var isProjectFetched = bool$prime(Js_json.classify(raiseIfNone(x$3)));
                    var x$4 = Js_dict.get(dict, "isProjectReadyForDev");
                    var isProjectReadyForDev = bool$prime(Js_json.classify(raiseIfNone(x$4)));
                    var rootBuildPath = nullableString(Js_dict.get(dict, "rootBuildPath"));
                    var rootInstallPath = nullableString(Js_dict.get(dict, "rootInstallPath"));
                    var rootPackageConfigPath = nullableString(Js_dict.get(dict, "rootPackageConfigPath"));
                    return Promise.resolve({
                                isProject: isProject,
                                isProjectSolved: isProjectSolved,
                                isProjectFetched: isProjectFetched,
                                isProjectReadyForDev: isProjectReadyForDev,
                                rootBuildPath: rootBuildPath,
                                rootInstallPath: rootInstallPath,
                                rootPackageConfigPath: rootPackageConfigPath
                              });
                  }
                  catch (raw_x){
                    var x$5 = Caml_js_exceptions.internalToOCamlException(raw_x);
                    if (x$5[0] === UnexpectedJSONValue) {
                      return Promise.reject(x$5);
                    } else if (x$5[0] === Js_exn.$$Error) {
                      var match = x$5[1].message;
                      if (match !== undefined) {
                        return Promise.reject([
                                    JSError,
                                    "Error: " + (String(match) + "")
                                  ]);
                      } else {
                        return Promise.reject([
                                    UnknownError,
                                    "An unknown error occurred"
                                  ]);
                      }
                    } else {
                      throw x$5;
                    }
                  }
                } else {
                  return Promise.reject([
                              Stderr,
                              statusErrorString
                            ]);
                }
              }));
}

function dropAnEsyJSON(compilerVersion, folder) {
  var esyJsonTargetDir = Path.join(folder, ".vscode", "esy");
  return $$Node.Fs.mkdir(true, esyJsonTargetDir).then((function (param) {
                return $$Node.Fs.writeFile(Filename.concat(esyJsonTargetDir, "esy.json"), Curry._1(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "{\"dependencies\": {\"ocaml\": \"",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                "\", \"",
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Scan_indic */Block.__(2, [/* "e" */101]),
                                                    /* String_literal */Block.__(11, [
                                                        "sy-ocaml/reason\": \"*\", \"",
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Scan_indic */Block.__(2, [/* "o" */111]),
                                                            /* String_literal */Block.__(11, [
                                                                "pam/merlin-lsp\": \"ocaml/merlin:merlin-lsp.opam#f030d5da7a\"}}",
                                                                /* End_of_format */0
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ]),
                                    "{\"dependencies\": {\"ocaml\": \"%s\", \"@esy-ocaml/reason\": \"*\", \"@opam/merlin-lsp\": \"ocaml/merlin:merlin-lsp.opam#f030d5da7a\"}}"
                                  ]), compilerVersion));
              }));
}

function processDeps(dependenciesJson, folder) {
  var match = Js_json.classify(dependenciesJson);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Promise.reject([
                Caml_builtin_exceptions.failure,
                "'dependencies' section in the manifest file was expected to be dictionary, but it was not!"
              ]);
  } else {
    var match$1 = Js_dict.get(match[0], "bs-platform");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      if (typeof match$2 === "number" || match$2.tag) {
        return Promise.reject([
                    Caml_builtin_exceptions.failure,
                    "'bs-platform' (in dependencies section) was expected to contain a semver string, but it was not!"
                  ]);
      } else if (Semver.satisfies(Semver.minVersion(match$2[0]), ">=6.0.0")) {
        return dropAnEsyJSON("4.6.x", folder);
      } else {
        return dropAnEsyJSON("4.2.x", folder);
      }
    } else {
      return Promise.reject([
                  Caml_builtin_exceptions.failure,
                  "'bs-platform' was expected in the 'dependencies' section of the manifest file, but was not found!"
                ]);
    }
  }
}

function getSubDict(dict, key) {
  return Belt_Option.flatMap(Js_dict.get(dict, key), Js_json.decodeObject);
}

function mergeDicts(dict1, dict2) {
  return Js_dict.fromArray(Js_dict.entries(dict2).concat(Js_dict.entries(dict1)));
}

function setup(manifestPath) {
  var folder = Curry._1(Filename.dirname, manifestPath);
  return $$Node.Fs.readFile(manifestPath).then((function (manifest) {
                var manifestJson = JSON.parse(manifest);
                var match = Js_json.classify(manifestJson);
                if (typeof match === "number" || match.tag !== /* JSONObject */2) {
                  return Promise.reject([
                              Caml_builtin_exceptions.failure,
                              "The entire manifest was expected to be dictionary of key-vals, but it was not!:"
                            ]);
                } else {
                  var dict = match[0];
                  var match$1 = getSubDict(dict, "dependencies");
                  var match$2 = getSubDict(dict, "devDependencies");
                  if (match$1 !== undefined) {
                    var dependenciesJson = Caml_option.valFromOption(match$1);
                    if (match$2 !== undefined) {
                      return processDeps(mergeDicts(dependenciesJson, Caml_option.valFromOption(match$2)), folder);
                    } else {
                      return processDeps(dependenciesJson, folder);
                    }
                  } else if (match$2 !== undefined) {
                    return processDeps(Caml_option.valFromOption(match$2), folder);
                  } else {
                    return Promise.reject([
                                Caml_builtin_exceptions.failure,
                                "The manifest file doesn't seem to contain `dependencies` or `devDependencies` property"
                              ]);
                  }
                }
              }));
}

exports.UnexpectedJSONValue = UnexpectedJSONValue;
exports.Stderr = Stderr;
exports.UnknownError = UnknownError;
exports.JSError = JSError;
exports.bool$prime = bool$prime;
exports.raiseIfNone = raiseIfNone;
exports.bool_ = bool_;
exports.nullableString$prime = nullableString$prime;
exports.nullableString = nullableString;
exports.getStatus = getStatus;
exports.dropAnEsyJSON = dropAnEsyJSON;
exports.processDeps = processDeps;
exports.getSubDict = getSubDict;
exports.mergeDicts = mergeDicts;
exports.setup = setup;
/* Node Not a pure module */
